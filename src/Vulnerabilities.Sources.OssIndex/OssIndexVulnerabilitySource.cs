using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using OssIndex.Api;
using OssIndex.Api.Models;
using Vulnerabilities.Core;
using Vulnerability = Vulnerabilities.Core.Vulnerability;

namespace Vulnerabilities.Sources.OssIndex
{
    public class OssIndexVulnerabilitySource : IVulnerabilitySource
    {
        private static readonly Dictionary<DependencyManagerTypes, PackageManagerTypes> s_packageManagerTypesByDependencyManagerTypes = new Dictionary<DependencyManagerTypes, PackageManagerTypes>
        {
            [DependencyManagerTypes.NuGet] = PackageManagerTypes.NuGet,
            [DependencyManagerTypes.Bower] = PackageManagerTypes.Bower,
            [DependencyManagerTypes.Npm] = PackageManagerTypes.Npm,
            [DependencyManagerTypes.Chocolatey] = PackageManagerTypes.Chocolatey,
            [DependencyManagerTypes.Msi] = PackageManagerTypes.Msi
        };

        private readonly OssIndexClient _client;

        public OssIndexVulnerabilitySource(string baseUrl)
        {
            _client = new OssIndexClient(baseUrl);
        }

        private PackageManagerTypes DependencyManagerTypesToPackageManager(DependencyManagerTypes dependencyManager)
        {
            if (s_packageManagerTypesByDependencyManagerTypes.TryGetValue(dependencyManager, out var packageManager))
            {
                return packageManager;
            }

            throw new InvalidOperationException($"Unknown dependency manager type: {dependencyManager.ToString()}");
        }

        public IEnumerable<DependencyManagerTypes> GetDependencyManagerTypes() => 
            s_packageManagerTypesByDependencyManagerTypes.Keys;

        public async Task<IEnumerable<Vulnerability>> GetVulnerabilitiesAsync(DependencyManagerTypes dependencyManager, string dependencyName, string dependencyVersion)
        {
            if (!s_packageManagerTypesByDependencyManagerTypes.Keys.Contains(dependencyManager))
            {
                return Enumerable.Empty<Vulnerability>();
            }

            var packageManager = DependencyManagerTypesToPackageManager(dependencyManager);
            return (await _client.GetPackageVersionAsync(packageManager, dependencyName, dependencyVersion))
                .Vulnerabilities
                ?.Select(x => new Vulnerability
                {
                    DependencyName = dependencyName,
                    DependencyVersion = dependencyVersion,
                    DependencyType = dependencyManager,
                    Title = x.Title,
                    Description = x.Description,
                    References = x.References,
                    Versions = x.Versions
                });
        }
    }
}
