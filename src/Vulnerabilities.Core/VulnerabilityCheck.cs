using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Vulnerabilities.Core
{
    public class VulnerabilityCheck
    {
        private readonly Dictionary<DependencyManagerTypes, IVulnerabilitySource> _sources = new Dictionary<DependencyManagerTypes, IVulnerabilitySource>();

        public void AddSource(DependencyManagerTypes dependencyManager, IVulnerabilitySource source)
        {
            _sources[dependencyManager] = source;
        }

        public async Task<IEnumerable<Vulnerability>> ExecuteAsync(string dependencyName, string dependencyVersion)
        {
            var results = new List<Vulnerability>();

            foreach (var key in _sources.Keys)
            {
                if (_sources.TryGetValue(key, out var source))
                {
                    var vulnerabilities = await source.GetVulnerabilitiesAsync(key, dependencyName, dependencyVersion);
                    results.AddRange(vulnerabilities ?? Enumerable.Empty<Vulnerability>());
                }
            }

            return results;
        }
    }
}

