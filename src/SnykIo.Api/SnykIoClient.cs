using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Flurl;
using Flurl.Http;
using Flurl.Http.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using SnykIo.Api.Models;

namespace SnykIo.Api
{
    public class SnykIoClient
    {
        private static readonly ISerializer s_serializer = new NewtonsoftJsonSerializer(new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });

        private readonly string _baseUrl;
        private readonly string _token;

        public SnykIoClient(string baseUrl, string token)
        {
            _baseUrl = baseUrl;
            _token = token;
        }

        private IFlurlRequest GetBaseUrl() => _baseUrl
            .AppendPathSegment("/api/v1/")
            .ConfigureRequest(settings => settings.JsonSerializer = s_serializer)
            .WithHeader("Authorization", $"token {_token}")
            .AllowHttpStatus(HttpStatusCode.NotFound);

        private IFlurlRequest GetBaseUrl(string path) => GetBaseUrl()
            .AppendPathSegment(path);

        private async Task HandleErrorResponseAsync(HttpResponseMessage responseMessage)
        {
            string content = await responseMessage.Content.ReadAsStringAsync();
            var error = JsonConvert.DeserializeObject<Error>(content);

            throw new InvalidOperationException($"{error?.Message}");
        }

        private async Task<T> HandleResponseAsync<T>(HttpResponseMessage responseMessage)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<T>(content);
            }

            await HandleErrorResponseAsync(responseMessage);
            return default(T);
        }

        //public async Task<PackageResponse> GetPackageVersionAsync(PackageManagerTypes packageManager, string packageName, string packageVersion = null)
        //{
        //    string version = packageVersion != null
        //        ? $"/{packageVersion}"
        //        : "";

        //    return (await GetBaseUrl($"/{packageManager.ToString().ToLowerInvariant()}/{packageName}{version}")
        //        .GetJsonAsync<IEnumerable<PackageResponse>>()
        //        .ConfigureAwait(false))
        //        .FirstOrDefault();
        //}

        //public async Task<IEnumerable<PackageResponse>> GetPackagesAsync(params PackageRequest[] packageRequests)
        //{
        //    var response = await GetBaseUrl()
        //        .PostJsonAsync(packageRequests)
        //        .ConfigureAwait(false);

        //    return await HandleResponseAsync<IEnumerable<PackageResponse>>(response).ConfigureAwait(false);
        //}
    }
}
