using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Flurl;
using Flurl.Http;
using Flurl.Http.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using OssIndex.Api.Models;

namespace OssIndex.Api
{
    public class OssIndexClient
    {
        private static readonly ISerializer s_serializer = new NewtonsoftJsonSerializer(new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });

        private readonly string _baseUrl;

        public OssIndexClient(string baseUrl)
        {
            _baseUrl = baseUrl;
        }

        private IFlurlRequest GetBaseUrl() => _baseUrl
            .AppendPathSegment("/v2.0/package")
            .ConfigureRequest(settings => settings.JsonSerializer = s_serializer)
            .AllowHttpStatus(HttpStatusCode.NotFound);

        private IFlurlRequest GetBaseUrl(string path) => GetBaseUrl()
            .AppendPathSegment(path);

        private async Task<T> HandleResponseAsync<T>(HttpResponseMessage responseMessage)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<T>(content);
            }

            return default(T);
        }

        public async Task<PackageResponse> GetPackageVersionAsync(PackageManagerTypes packageManager, string packageName, string packageVersion = null)
        {
            string version = packageVersion != null
                ? $"/{packageVersion}"
                : "";

            return (await GetBaseUrl($"/{packageManager.ToString().ToLowerInvariant()}/{packageName}{version}")
                .GetJsonAsync<IEnumerable<PackageResponse>>()
                .ConfigureAwait(false))
                .FirstOrDefault();
        }

        public async Task<IEnumerable<PackageResponse>> GetPackagesAsync(params PackageRequest[] packageRequests)
        {
            var response = await GetBaseUrl()
                .PostJsonAsync(packageRequests)
                .ConfigureAwait(false);

            return await HandleResponseAsync<IEnumerable<PackageResponse>>(response).ConfigureAwait(false);
        }
    }
}
